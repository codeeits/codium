// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, email, password_hash, username, created_at, updated_at, is_admin)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, username, email, password_hash, created_at, updated_at, is_admin, profile_pic_id
`

type CreateUserParams struct {
	ID           uuid.UUID
	Email        string
	PasswordHash string
	Username     string
	CreatedAt    sql.NullTime
	UpdatedAt    sql.NullTime
	IsAdmin      bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.PasswordHash,
		arg.Username,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IsAdmin,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsAdmin,
		&i.ProfilePicID,
	)
	return i, err
}

const deleteUsers = `-- name: DeleteUsers :exec
DELETE FROM users *
`

func (q *Queries) DeleteUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteUsers)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password_hash, created_at, updated_at, is_admin, profile_pic_id FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsAdmin,
		&i.ProfilePicID,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, password_hash, created_at, updated_at, is_admin, profile_pic_id FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsAdmin,
		&i.ProfilePicID,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, password_hash, created_at, updated_at, is_admin, profile_pic_id FROM users WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsAdmin,
		&i.ProfilePicID,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, username, email, password_hash, created_at, updated_at, is_admin, profile_pic_id FROM users ORDER BY created_at DESC LIMIT $1 OFFSET $2
`

type GetUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.PasswordHash,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsAdmin,
			&i.ProfilePicID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserEmail = `-- name: UpdateUserEmail :one
UPDATE users
SET email = $2, updated_at = $3
WHERE id = $1
RETURNING id, username, email, password_hash, created_at, updated_at, is_admin, profile_pic_id
`

type UpdateUserEmailParams struct {
	ID        uuid.UUID
	Email     string
	UpdatedAt sql.NullTime
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserEmail, arg.ID, arg.Email, arg.UpdatedAt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsAdmin,
		&i.ProfilePicID,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE users
SET password_hash = $2, updated_at = $3
WHERE id = $1
RETURNING id, username, email, password_hash, created_at, updated_at, is_admin, profile_pic_id
`

type UpdateUserPasswordParams struct {
	ID           uuid.UUID
	PasswordHash string
	UpdatedAt    sql.NullTime
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserPassword, arg.ID, arg.PasswordHash, arg.UpdatedAt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsAdmin,
		&i.ProfilePicID,
	)
	return i, err
}

const updateUserPfp = `-- name: UpdateUserPfp :one
UPDATE users
SET profile_pic_id = $2, updated_at = $3
WHERE id = $1
RETURNING id, username, email, password_hash, created_at, updated_at, is_admin, profile_pic_id
`

type UpdateUserPfpParams struct {
	ID           uuid.UUID
	ProfilePicID uuid.NullUUID
	UpdatedAt    sql.NullTime
}

func (q *Queries) UpdateUserPfp(ctx context.Context, arg UpdateUserPfpParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserPfp, arg.ID, arg.ProfilePicID, arg.UpdatedAt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsAdmin,
		&i.ProfilePicID,
	)
	return i, err
}

const updateUserUsername = `-- name: UpdateUserUsername :one
UPDATE users
SET username = $2, updated_at = $3
WHERE id = $1
RETURNING id, username, email, password_hash, created_at, updated_at, is_admin, profile_pic_id
`

type UpdateUserUsernameParams struct {
	ID        uuid.UUID
	Username  string
	UpdatedAt sql.NullTime
}

func (q *Queries) UpdateUserUsername(ctx context.Context, arg UpdateUserUsernameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserUsername, arg.ID, arg.Username, arg.UpdatedAt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsAdmin,
		&i.ProfilePicID,
	)
	return i, err
}
