// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: files.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createFile = `-- name: CreateFile :one
INSERT INTO files (id, user_id, filename, filepath, filesize, uploaded_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, filename, filepath, filesize, uploaded_at
`

type CreateFileParams struct {
	ID         uuid.UUID
	UserID     uuid.UUID
	Filename   string
	Filepath   string
	Filesize   int64
	UploadedAt sql.NullTime
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) (File, error) {
	row := q.db.QueryRowContext(ctx, createFile,
		arg.ID,
		arg.UserID,
		arg.Filename,
		arg.Filepath,
		arg.Filesize,
		arg.UploadedAt,
	)
	var i File
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Filename,
		&i.Filepath,
		&i.Filesize,
		&i.UploadedAt,
	)
	return i, err
}

const getFileByID = `-- name: GetFileByID :one
SELECT id, user_id, filename, filepath, filesize, uploaded_at FROM files
WHERE id = $1
`

func (q *Queries) GetFileByID(ctx context.Context, id uuid.UUID) (File, error) {
	row := q.db.QueryRowContext(ctx, getFileByID, id)
	var i File
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Filename,
		&i.Filepath,
		&i.Filesize,
		&i.UploadedAt,
	)
	return i, err
}

const getFilesByUserID = `-- name: GetFilesByUserID :many
SELECT id, user_id, filename, filepath, filesize, uploaded_at FROM files
WHERE user_id = $1
ORDER BY uploaded_at DESC
LIMIT $2 OFFSET $3
`

type GetFilesByUserIDParams struct {
	UserID uuid.UUID
	Limit  int32
	Offset int32
}

func (q *Queries) GetFilesByUserID(ctx context.Context, arg GetFilesByUserIDParams) ([]File, error) {
	rows, err := q.db.QueryContext(ctx, getFilesByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Filename,
			&i.Filepath,
			&i.Filesize,
			&i.UploadedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
